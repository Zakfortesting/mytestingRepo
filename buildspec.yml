version: 0.2
phases:
  install:
    commands:
      - echo Installing app dependencies...
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl   
      - chmod +x ./kubectl
      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
      - source ~/.bashrc
      - echo 'Check kubectl version'
      - kubectl version --short --client
      - chmod +x prereqs.sh
      - sh prereqs.sh
  pre_build:
    commands:
      - echo Logging in to Amazon ECR....
      - aws --version
      #- $(aws ecr get-login --region ap-south-1 --no-include-email)
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 913351046878.dkr.ecr.us-east-1.amazonaws.com
      - # Replace with this to your repository URI
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - echo Logging in to Amazon EKS...
      - aws eks --region us-east-1 update-kubeconfig --name MyCluster-Devel 
      - echo check config 
      - kubectl config view --minify
      - echo check kubectl access
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo pushing to repo
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file..
      
      - echo Scanning the Docker image for vulnerabilities...
      - aws ecr start-image-scan --repository-name "$REPOSITORY_NAME" --image-id imageTag=latest
      - scan_result=$(aws ecr describe-image-scan-findings --repository-name "$REPOSITORY_NAME" --image-id imageTag=latest --output json)
      - echo "$scan_result"
      - high_severity=$(echo "$scan_result" | jq -r '.imageScanFindings.findingSeverityCounts.HIGH')
       - if [ "$high_severity" -gt 0 ]; then
        echo "High-severity vulnerabilities found. Failing the build.";
        exit 1;
        fi
      - kubectl get service
      - kubectl apply -f kubernetes/serviceaccountEPS.yaml
      - kubectl apply -f kubernetes/secretEPS.yaml
      - kubectl apply -f kubernetes/roleEPS.yaml
      - kubectl apply -f kubernetes/rolebindingEPS.yaml
      - kubectl apply -f kubernetes/deploymentEPS.yaml  
      - kubectl apply -f kubernetes/serviceEPS.yaml  
